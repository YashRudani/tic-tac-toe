{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleResetButton","bind","assertThisInitialized","evaluate","minmax","find_best_move","hasMovesLeft","winner","arrayToMat","chooseRandomPlayers","state","text","human_symbol","computer_symbol","o_turn","board","index","keep_playing","update_board","setState","ai_index","squares","lines","i","length","_lines$i","slicedToArray","a","b","c","mat","k","j","depth","get_max","val","best","Infinity","Math","max","min","row","col","random","_this2","have_winner","react_default","createElement","className","map","cell","key","onClick","handleCellClick","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e1741435.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.handleResetButton = this.handleResetButton.bind(this);\n    this.evaluate = this.evaluate.bind(this);\n    this.minmax = this.minmax.bind(this);\n    this.find_best_move = this.find_best_move.bind(this);\n    this.hasMovesLeft = this.hasMovesLeft.bind(this);\n    this.winner = this.winner.bind(this);\n    this.arrayToMat = this.arrayToMat.bind(this);\n    this.chooseRandomPlayers = this.chooseRandomPlayers.bind(this);\n    \n    this.state = {\n      text: 'Starting Game...',\n      human_symbol: 'O',\n      computer_symbol: 'X',\n      o_turn: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    };\n  }\n\n  handleCellClick(index, keep_playing) {\n    if (this.state.board[index] === \"\" && keep_playing === true) {\n      let update_board = this.state.board;\n      update_board[index] = this.state.human_symbol;\n      this.setState({\n        board: update_board,\n        text: \"(\"+this.state.computer_symbol+\") Computer's turn\"\n      });\n      if(!this.hasMovesLeft){\n        this.setState({text: 'Draw'})\n      }\n      let ai_index = this.find_best_move(update_board);\n      if (ai_index !== -4) update_board[ai_index] = this.state.computer_symbol; \n      this.setState({\n        board: update_board,\n        text: \"(\"+this.state.human_symbol+\") Your turn\"\n      });  \n      if(!this.hasMovesLeft){\n        this.setState({text: 'Draw'})\n      }\n    } \n  }\n\n  winner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      let [a, b, c] = lines[i];\n      if (squares[a] !== \"\" && squares[a] === squares[b] && squares[a] === squares[c] && squares[b] === squares[c])\n        return squares[a];\n    }\n    return null;\n  }\n\n  arrayToMat(squares) {\n    let mat = []\n    let k = 0;\n\n    for (let i = 0; i < 3; i++) {\n      mat[i] = [];\n      for (let j = 0; j < 3; j++) mat[i][j] = squares[k++];\n    }\n\n    return mat;\n  }\n\n  hasMovesLeft(mat) {\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (mat[i][j] === \"\") return true;\n      }\n    }\n    this.setState({text: 'Draw!!!'})\n    return false;\n  }\n\n  evaluate(mat, depth) {\n    for (let i = 0; i < 3; i++) {\n      if (mat[i][0] === mat[i][1] && mat[i][0] === mat[i][2] && mat[i][1] === mat[i][2]) {\n        if (mat[i][0] === this.state.computer_symbol) return 100 - depth;\n        if (mat[i][0] === this.state.human_symbol) return depth - 100;\n      }\n    }\n    for (let j = 0; j < 3; j++) {\n      if (mat[0][j] === mat[1][j] && mat[0][j] === mat[2][j] && mat[1][j] === mat[2][j]) {\n        if (mat[0][j] === this.state.computer_symbol) return 100 - depth;\n        if (mat[0][j] === this.state.human_symbol) return depth - 100;\n      }\n    }\n    if (mat[0][0] === mat[1][1] && mat[0][0] === mat[2][2] && mat[1][1] === mat[2][2]) {\n      if (mat[0][0] === this.state.computer_symbol) return 100 - depth;\n      if (mat[0][0] === this.state.human_symbol) return depth - 100;\n    }\n    if (mat[0][2] === mat[1][1] && mat[0][2] === mat[2][0] && mat[1][1] === mat[2][0]) {\n      if (mat[0][2] === this.state.computer_symbol) return 100 - depth;\n      if (mat[0][2] === this.state.human_symbol) return depth - 100;\n    }\n    return 0;\n  }\n\n  minmax(mat, depth, get_max) {\n    if (this.hasMovesLeft(mat) === false) {\n      return this.evaluate(mat, depth);    \n    } \n    let val = this.evaluate(mat, depth);\n    if (val !== 0) return val;\n    if (get_max) {\n      let best = -Infinity;\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (mat[i][j] === \"\") {\n            mat[i][j] = this.state.computer_symbol;\n            best = Math.max(best, this.minmax(mat, depth+1, !get_max));\n            mat[i][j] = \"\";\n          }\n        }\n      }\n      return best;\n    }\n    else {\n      let best = Infinity; \n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (mat[i][j] === \"\") {\n            mat[i][j] = this.state.human_symbol;\n            best = Math.min(best, this.minmax(mat, depth+1, !get_max));\n            mat[i][j] = \"\";\n          }\n        }\n      }\n      return best;\n    }\n  }\n\n  find_best_move(squares) {\n    let mat = this.arrayToMat(squares);\n    let val, row = -1, col = -1, best = -Infinity;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (mat[i][j] === \"\") {\n          mat[i][j] = this.state.computer_symbol;\n          val = this.minmax(mat, 0, false);\n          mat[i][j] = \"\";\n          if (val > best) {\n            best = val;\n            row = i;\n            col = j;\n          }\n        }\n      }\n    }\n    return (3 * row) + col;\n  }\n\n  handleResetButton() {\n    this.setState({\n      text: '(O) Your turn',\n      human_symbol: 'O',\n      computer_symbol: 'X',\n      o_turn: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n    })\n    this.chooseRandomPlayers();\n  }\n  chooseRandomPlayers(){\n    let chance = Math.random() > 0.5 ? \"computer\" : \"human\";\n    if(chance === \"computer\"){\n      this.setState({\n        computer_symbol: 'O',\n        human_symbol: 'X'\n      })\n      let update_board = this.state.board;\n      let ai_index = this.find_best_move(update_board);\n      if (ai_index !== -4) update_board[ai_index] = 'O'; \n      this.setState({\n        board: update_board,\n        text: '(X)Your turn'\n      });  \n    }\n    else{\n      this.setState({\n        computer_symbol: 'X',\n        human_symbol: 'O',\n        text: '(O)Your turn'\n      })\n    }\n  }\n  componentDidMount(){\n    this.chooseRandomPlayers();\n  }\n  render() {\n    let text = this.state.text\n    let have_winner = this.winner(this.state.board);\n    let keep_playing = have_winner === null ? true : false;\n    if (have_winner !== null) {\n      text = have_winner + \" won!\"\n    }\n    if (!this.hasMovesLeft) {\n      text = \"Draw!!!\"\n    }\n    return (\n      <div className=\"master\">\n        <div className=\"game\">\n          <div className=\"board\">\n            {this.state.board.map((cell, index) => {\n              return <div className=\"square\" key={index} onClick={() => this.handleCellClick(index, keep_playing)}> {cell} </div>\n            })}\n          </div>\n        </div>\n        <div className=\"message-text\">{text}</div>\n        \n        <div className=\"side-bar\">\n          <div className=\"button-line\">\n            <div className=\"active-button\" onClick={()=>this.handleResetButton()}> Reset </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}